name: wokwi
# either manually started, or on a schedule
on: [ push, workflow_dispatch ]
jobs:
  wokwi:
    env:
        OPENLANE_TAG:   2022.02.23_02.50.41
        OPENLANE_IMAGE_NAME:    efabless/openlane:$(OPENLANE_TAG)
        OPENLANE_ROOT:  /home/runner/openlane
        PDK_ROOT:       /home/runner/pdk
        PDK:            sky130A

    # ubuntu
    runs-on: ubuntu-latest
    steps:
    # need the repo checked out
    - name: checkout repo
      uses: actions/checkout@v2

    - uses: actions/checkout@v2
      with:
          repository: s-holst/GDS2WebGL
          path: GDS2WebGL

    - name: cache conda
      uses: actions/cache@v2
      env:
        # Increase this value to reset cache if etc/example-environment.yml has not changed
        CACHE_NUMBER: 1
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}

    - name: setup miniconda
      uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        activate-environment: tinytapeout
        channel-priority: strict
        environment-file: environment.yml
        use-only-tar-bz2: true

    - name: update path
      shell: bash -l {0}
      run: |
        echo $CONDA/envs/tinytapeout/bin >> $GITHUB_PATH

    - name: generate verilog
      run: make generate

    # build PDK and fetch OpenLane
    - name: pdk & caravel
      run: |
        cd $HOME
        git clone https://github.com/efabless/caravel_user_project.git -b mpw-6c
        cd caravel_user_project
        make setup

    # fetch the Verilog from Wokwi API
    - name: fetch Verilog
      run: make fetch

    # run the 'harden' rule in the Makefile to use OpenLane to build the GDS
    - name: make GDS
      run: make harden

    # for debugging, show all the files
    - name: show files
      run: find runs/wokwi/results

    # make the SVG
    - name: create svg
      run: python view.py

    # make html gds viewer with GDS2WebGL
    - name: GDS2WebGL
      run: |
        cd GDS2WebGL
        python3 gds2webgl.py -i ../runs/wokwi/results/final/gds/*gds -o ../gds.html

  deploy:
    needs: wokwi
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: setup pages
      uses: actions/configure-pages@v2
    - name: download artifact
      uses: actions/download-artifact@v3
      with:
        name: GDS
    - name: upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: '.'
    - name: deploy to github pages
      id: deployment
      uses: actions/deploy-pages@v1
